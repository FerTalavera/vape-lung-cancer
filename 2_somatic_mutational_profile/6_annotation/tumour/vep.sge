#!/bin/bash
#
# Use Current working directory
#$ -cwd
#
# Join stdout and stderr
#$ -j n
#
# Run job through bash shell
#$ -S /bin/bash
#
# Your job name
#$ -N vep
#
# Send an email after the job has finished
#$ -m bes
#$ -M fer_talavera@comunidad.unam.mx
#$ -l vf=50G
#
#
# If modules are needed, source modules environment (Do not delete the next line):
. /etc/profile.d/modules.sh
#
# Add any modules you might require:
module load vep/r99.2
module load parallel
#
# Write your commands in the next line:
# Define reference and other fixed paths
cache_dir="/mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/2_somatic_mutational_profile/6_annotation/vep_caches/"
input_dir="/mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/2_somatic_mutational_profile/5_filtered_calls/tumour/"
output_dir="/mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/2_somatic_mutational_profile/6_annotation/tumour"

# Create the output directory if it doesn't exist
mkdir -p "$output_dir"

# List of sample identifiers
samples=("MD6753a" "MD6754a" "MD6755a" "MD6756a" "MD6758a") 

# Define a function to process each sample
run_vep() {
    local sample="$1"
    local input="$input_dir/${sample}_filtered_bcftools.vcf"
    local output="$output_dir/${sample}_filtered_bcftools_vep.vcf"

    # Check if the input BAM file exists
    if [[ ! -f "$input" ]]; then
        echo "ERROR: Input file $input cannot be found."
        return 1
    fi

    # Run VEP for the sample
    vep --cache --dir_cache "$cache_dir" -i "$input" -o "$output" --vcf --species "mus_musculus"  
    
    # Check if the output VCF was successfully created
    if [[ $? -ne 0 ]]; then
        echo "ERROR: VEP failed for sample $sample."
    else
        echo "Successfully processed sample $sample."
    fi
}

# Export variables and functions to be used by parallel
export -f run_vep
export input_dir
export output_dir
export cache_dir

# Run in parallel
parallel run_vep ::: "${samples[@]}"
