#!/bin/bash
#
# Use Current working directory
#$ -cwd
#
# Join stdout and stderr
#$ -j n
#
# Run job through bash shell
#$ -S /bin/bash
#
# Your job name
#$ -N vcf2maf
#
# Send an email after the job has finished
#$ -m bes
#$ -M fer_talavera@comunidad.unam.mx
#$ -l vf=50G
#
#
# If modules are needed, source modules environment (Do not delete the next line):
. /etc/profile.d/modules.sh
#
# Add any modules you might require:
module load gcc/5.1.0
module load samtools/1.9
module load vep/r99.2
module load parallel
#
# Write your commands in the next line:
# Define reference and other fixed paths
reference="/mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/reference/GRCm38/Mus_musculus.GRCm38.68.dna.toplevel.fa"
input_dir="/mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/2_somatic_mutational_profile/6_annotation/tumour"
output_dir="/mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/2_somatic_mutational_profile/8_maftools"

# Create the output directory if it doesn't exist
mkdir -p "$output_dir"

# Array of tumor and normal sample pairs
samples=(
    "MD6753a:MD6753c"
    "MD6754a:MD6754c"
    "MD6755a:MD6755c"
    "MD6756a:MD6756c"
    "MD6758a:MD6758c"
)

# Define a function to process each sample
run_vcf2maf() {
    local pair="$1"
    local tumor_sample="${pair%%:*}"  # Extract tumor sample
    local normal_sample="${pair##*:}"  # Extract normal sample

    local input="$input_dir/${tumor_sample}_filtered_bcftools_vep.vcf"
    local output="$output_dir/${tumor_sample}_filtered_bcftools_vep.maf"

    # Check if the input BAM file exists
    if [[ ! -f "$input" ]]; then
        echo "ERROR: Input file $input cannot be found."
        return 1
    fi

    # Run vcf2maf for the sample
    perl /mnt/atgc-d1/drobles/ftalavera/vape_lung_cancer/2_somatic_mutational_profile/8_maftools/vcf2maf/mskcc-vcf2maf-f6d0c40/vcf2maf.pl --input-vcf "$input" --output-maf "$output" --vep-path /cm/shared/apps/vep/ensembl-vep-release-99.2 --species mus_musculus --ncbi-build GRCm38 --vep-data "$vep_data_dir" --ref-fasta "$reference" --tumor-id "$tumor_sample" --normal-id "$normal_sample"

    
    # Check if the output VCF was successfully created
    if [[ $? -ne 0 ]]; then
        echo "ERROR: vcf2maf failed for sample $sample."
    else
        echo "Successfully processed sample $sample."
    fi
}

# Export variables and functions to be used by parallel
export -f run_vcf2maf
export input_dir
export output_dir
export reference
export vep_data_dir

# Run in parallel
parallel run_vcf2maf ::: "${samples[@]}"
